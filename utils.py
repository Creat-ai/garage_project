
import logging
import xml.etree.ElementTree as ET
from html import unescape


def parse_find_vehicle_by_plate_number(xml_response: str):
    """–ü–∞—Ä—Å–∏—Ç XML-–æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É."""
    if not isinstance(xml_response, str):
        raise TypeError(f"–û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ XML, –Ω–æ –ø–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ {type(xml_response)}")

    try:
        # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π XML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è <return>
        root = ET.fromstring(xml_response)
        logging.debug(f"–ö–æ—Ä–Ω–µ–≤–æ–π XML: {ET.tostring(root, encoding='utf-8').decode('utf-8')}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ XML

        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –±–ª–æ–∫ <return>
        namespace = "{http://WebCatalog.Kito.ec}"  # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω –∏–∑ XML-–æ—Ç–≤–µ—Ç–∞
        return_element = root.find(f".//{namespace}return")

        if return_element is None or not return_element.text:
            logging.warning("–≠–ª–µ–º–µ–Ω—Ç <return> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ.")
            return []

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ <return> (—É–±–∏—Ä–∞–µ–º &lt; –∏ &gt;)
        raw_xml = unescape(return_element.text.strip())
        logging.debug(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML –∏–∑ <return>: {raw_xml}")

        # –ü–∞—Ä—Å–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π XML
        inner_root = ET.fromstring(raw_xml)
        vehicles_element = inner_root.find("FindVehicleByPlateNumber")
        if not vehicles_element:
            logging.warning("–¢–µ–≥ <FindVehicleByPlateNumber> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ.")
            return []

        vehicles = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ <row>
        for row in vehicles_element.findall("row"):
            vehicle = {
                "brand": row.attrib.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "catalog": row.attrib.get("catalog", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "name": row.attrib.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "ssd": row.attrib.get("ssd", ""),
                "vehicleid": row.attrib.get("vehicleid", ""),
                "vin": row.attrib.get("vin", None),
                "attributes": {}  # –ê—Ç—Ä–∏–±—É—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            }

            for attribute in row.findall("attribute"):
                key = attribute.attrib.get("key")
                value = attribute.attrib.get("value", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                if key:
                    vehicle["attributes"][key] = value

            vehicles.append(vehicle)
            logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {vehicle}")

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(vehicles)}")
        return vehicles

    except ET.ParseError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML: {e}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML: {e}")

def format_vehicle_response(vehicles: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    :param vehicles: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
    """
    if not vehicles:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏."

    response = "üöó –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n"
    for idx, vehicle in enumerate(vehicles, start=1):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        brand = vehicle.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        name = vehicle.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        manufactured = vehicle["attributes"].get("date", "–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
        body_style = vehicle["attributes"].get("bodyStyle", "–¢–∏–ø –∫—É–∑–æ–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        engine = vehicle["attributes"].get("engine", "–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        transmission = vehicle["attributes"].get("transmission", "–ö–ü–ü –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        vin = vehicle.get("vin", "–ù–µ —É–∫–∞–∑–∞–Ω")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        response += (
            f"{idx}. {brand} {name}\n"
            f"   üìÖ –í—ã–ø—É—â–µ–Ω: {manufactured}\n"
            f"   üèéÔ∏è –ö—É–∑–æ–≤: {body_style}\n"
            f"   ‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {engine}\n"
            f"   üîß –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {transmission}\n"
            f"   üîë VIN: {vin}\n\n"
        )

    response += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ '0' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    return response
