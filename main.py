import hashlib
import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from autorization_logic import check_user_credentials, search_vehicle_combined, find_vehicle_by_plate_number, \
    search_vehicle_details
from utils import parse_find_vehicle_by_plate_number, format_vehicle_response

from db import Database

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7048753227:AAE0NF-erxLib9knlFGCjbZ3LQD5_zEj2tM"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = Database()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∏—Å–∫")],
            [KeyboardButton(text="–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")],
        ],
        resize_keyboard=True
    )


# –ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def unauthorized_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")],
        ],
        resize_keyboard=True
    )


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()


class VinStates(StatesGroup):
    waiting_for_vin = State()  # –†–∞–±–æ—Ç–∞ —Å –≥–æ—Å. –Ω–æ–º–µ—Ä–æ–º
    waiting_for_vin_by_vin = State()  # –†–∞–±–æ—Ç–∞ —Å VIN-–∫–æ–¥–æ–º
    waiting_for_selection = State()  # –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    waiting_for_part_name = State()

class PartStates(StatesGroup):
    waiting_for_part_name = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–∞–ø—á–∞—Å—Ç–∏

async def is_user_authorized(user_id: int, message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_user_by_id(user_id)
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –≤ –º–µ–Ω—é.",
            reply_markup=unauthorized_menu()
        )
        return False
    return True

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    user = db.get_user_by_id(user_id)

    if user:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            reply_markup=main_menu()
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=unauthorized_menu()
        )


@dp.message(lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def authorize_user(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await state.set_state(AuthStates.waiting_for_login)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")


@dp.message(AuthStates.waiting_for_login)
async def get_login(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞"""
    await state.update_data(userlogin=message.text)
    await state.set_state(AuthStates.waiting_for_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@dp.message(AuthStates.waiting_for_password)
async def get_password(message: types.Message, state: FSMContext):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await state.get_data()
    userlogin = user_data.get("userlogin")
    password = message.text
    telegram_id = message.from_user.id

    user_info = check_user_credentials(userlogin, password)
    if user_info:
        db.add_user(
            telegram_id=telegram_id,
            abcp_user_id=user_info.get("id"),
            userlogin=userlogin,
            userpsw=hashlib.md5(password.encode()).hexdigest(),
            code=user_info.get("code"),
            email=user_info.get("email"),
            name=user_info.get("name"),
            mobile=user_info.get("mobile"),
            organization=user_info.get("organization")
        )
        await message.answer(
            f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['name']}!",
            reply_markup=main_menu()
        )
        await state.clear()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        await state.clear()


@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫")
async def handle_plate_or_vin_search(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –≥–æ—Å. –Ω–æ–º–µ—Ä.
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ VIN.
    """
    user_id = message.from_user.id
    if not await is_user_authorized(user_id, message):
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    await state.set_state(VinStates.waiting_for_vin)


@dp.message(VinStates.waiting_for_vin)
async def handle_plate_number_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Å. –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ,
    –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É Laximo.
    """
    part_number = message.text.strip().upper()

    # –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏
    existing_vehicle = db.get_vehicle_by_part_number(part_number)

    if existing_vehicle:
        # –ö–æ–≥–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        response = (
            f"üöó –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: {existing_vehicle['brand']} {existing_vehicle['name']}.\n"
            f"VIN: {existing_vehicle.get('vin', '–Ω–µ —É–∫–∞–∑–∞–Ω')}.\n"
            f"–ì–æ—Ç–æ–≤—ã –∏—Å–∫–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ —ç—Ç–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏."
        )
        await message.answer(response)

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ FSM (—á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–Ω–∞–ª–æ –∏—Ö)
        await state.update_data(
            car_id=existing_vehicle["car_id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º car_id –≤–º–µ—Å—Ç–æ id
            catalog=existing_vehicle.get("catalog"),  # –ö–∞—Ç–∞–ª–æ–≥ Laximo
            vehicleid=existing_vehicle.get("vehicleid"),
            ssd=existing_vehicle.get("ssd")
        )
        await state.set_state(PartStates.waiting_for_part_name)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É –∑–∞–ø—á–∞—Å—Ç–µ–π
        return

    # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∏—â–µ–º —á–µ—Ä–µ–∑ Laximo
    try:
        await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —á–µ—Ä–µ–∑ Laximo...")
        xml_response = find_vehicle_by_plate_number(part_number)

        if not xml_response:
            await message.answer("‚õî –°–µ—Ä–≤–∏—Å Laximo –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
            return

        vehicles = parse_find_vehicle_by_plate_number(xml_response)
        if vehicles:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            vehicle_list_text = format_vehicle_response(vehicles)
            await state.update_data(vehicles=vehicles, part_number=part_number)
            await message.answer(vehicle_list_text)
            await state.set_state(VinStates.waiting_for_selection)
        else:
            await message.answer(
                "üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ —á–µ—Ä–µ–∑ Laximo. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ VIN."
            )
            await state.set_state(VinStates.waiting_for_vin_by_vin)

    except Exception as e:
        logging.error(f"[handle_plate_number_input] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()






@dp.message(VinStates.waiting_for_selection)
async def handle_vehicle_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ Laximo."""
    user_input = message.text.strip()

    if user_input == "0":
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", reply_markup=main_menu())
        await state.clear()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        data = await state.get_data()
        vehicles = data.get("vehicles", [])

        selected_index = int(user_input) - 1  # –ò–Ω–¥–µ–∫—Å –≤—ã–±–æ—Ä–∫–∏
        if 0 <= selected_index < len(vehicles):
            selected_vehicle = vehicles[selected_index]
            part_number = data.get("part_number")  # –í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Å. –Ω–æ–º–µ—Ä

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
            car_id = db.add_vehicle_to_database(
                vehicleid=selected_vehicle["vehicleid"],
                vin=selected_vehicle["vin"],
                brand=selected_vehicle["brand"],
                name=selected_vehicle["name"],
                catalog=selected_vehicle["catalog"],
                ssd=selected_vehicle["ssd"],
                part_number=part_number  # –ò—Å–ø–æ–ª—å–∑—É–µ–º part_number –∫–∞–∫ –¥–æ–ø. –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            )
            if car_id:
                await state.update_data(car_id=car_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º car_id –≤ FSM
                await message.answer("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
                await state.set_state(PartStates.waiting_for_part_name)
            else:
                await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")



@dp.message(VinStates.waiting_for_vin_by_vin)
async def handle_vin_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ VIN-–∫–æ–¥–∞"""
    vin = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å VIN-–∫–æ–¥–∞
    if not re.fullmatch(r"^[A-HJ-NPR-Z0-9]{17}$", vin):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN
    result = search_vehicle_combined(vin, db)

    if result["status"] == "found":
        cars = result["car"]
        response = "üöó –ù–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ VIN-–∫–æ–¥—É:\n"
        for idx, car in enumerate(cars if isinstance(cars, list) else [cars], start=1):
            response += f"{idx}. {car['brand']} {car['name']} (VIN: {car['vin']})\n"
        await message.answer(response)
    else:
        await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await state.clear()



@dp.message(PartStates.waiting_for_part_name)
async def handle_part_name_input(message: types.Message, state: FSMContext):
    """
    –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ë–î, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Laximo –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
    """
    part_name = message.text.strip().lower()  # –°–Ω–∏–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –≤–≤–æ–¥–∞
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    car_id = data.get("car_id")  # ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è

    if not car_id:
        await message.answer("–û—à–∏–±–∫–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        await state.clear()
        return

    # 1. –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    filtered_parts = db.search_local_parts(car_id, part_name)
    if filtered_parts:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = "üì¶ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:\n"
        for part in filtered_parts:
            response += f"üîß {part[1]} (OEM: {part[2]})\n"
        await message.answer(response)
    else:
        # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        await message.answer("‚õî –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Laximo. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Laximo
            laximo_response = search_vehicle_details(
                catalog=data.get("catalog"),
                vehicle_id=data.get("vehicleid"),
                ssd=data.get("ssd"),
                part_name=part_name,
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(laximo_response, dict) and "error" in laximo_response:
                await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ Laximo: {laximo_response['error']}")
            elif laximo_response:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
                db.save_parts_to_db(car_id, laximo_response)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                response = "üì¶ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ Laximo:\n"
                for part in laximo_response:
                    response += f"üîß {part['name']} (OEM: {part['oem']})\n"
                await message.answer(response)
            else:
                await message.answer("‚õî –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ —á–µ—Ä–µ–∑ Laximo.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Laximo: {e}")
            await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ Laximo. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    await state.clear()







@dp.message(lambda message: True)
async def unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    if current_state:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –°–ª–µ–¥—É–π—Ç–µ —Ç–µ–∫—É—â–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
