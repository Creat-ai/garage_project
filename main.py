import hashlib
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import F, types


from autorization import check_user_credentials, send_soap_request
from db import Database  # –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7048753227:AAE0NF-erxLib9knlFGCjbZ3LQD5_zEj2tM"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = Database()


# –ö–Ω–æ–ø–∫–∞: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –≥–∞—Ä–∞–∂")],
            [KeyboardButton(text="–ü–æ–∏—Å–∫")],
        ],
        resize_keyboard=True
    )


# –ö–Ω–æ–ø–∫–∞: –ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def unauthorized_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")],
        ],
        resize_keyboard=True
    )


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()


class VinStates(StatesGroup):
    waiting_for_vin = State()
    waiting_for_selection = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_user_authorized(user_id: int, message: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω; False, –µ—Å–ª–∏ –Ω–µ—Ç.
    """
    user = db.get_user_by_id(user_id)
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –≤ –º–µ–Ω—é.",
            reply_markup=unauthorized_menu()
        )
        return False
    return True


# –í–∞–ª–∏–¥–∞—Ü–∏—è VIN-–∫–æ–¥–∞
def validate_vin(vin: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ VIN-–∫–æ–¥–∞.
    """
    vin = vin.strip().upper()
    if len(vin) == 17 and vin.isalnum():
        return vin
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user_by_id(user_id)

    if user:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            reply_markup=main_menu()
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=unauthorized_menu()
        )


async def send_vehicle_options(chat_id, vehicles, bot):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π """
    buttons = []
    for idx, vehicle in enumerate(vehicles):
        brand = vehicle["brand"]
        name = vehicle["name"]
        catalog = vehicle["catalog"]
        text = f"{brand} {name} ({catalog})"

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        buttons.append(
            types.InlineKeyboardButton(text=text, callback_data=f"confirm_car_{idx}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append(
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_car")
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(
        chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
@dp.message(lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def authorize_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthStates.waiting_for_login)


# –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
@dp.message(AuthStates.waiting_for_login)
async def get_login(message: types.Message, state: FSMContext):
    await state.update_data(userlogin=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_for_password)


# –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message(AuthStates.waiting_for_password)
async def get_password(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    userlogin = user_data.get("userlogin")
    password = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    user_info = check_user_credentials(userlogin, password)
    if user_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        db.add_user(
            telegram_id=telegram_id,
            abcp_user_id=user_info.get("id"),
            userlogin=userlogin,
            userpsw=hashlib.md5(password.encode()).hexdigest(),
            code=user_info.get("code"),
            email=user_info.get("email"),
            name=user_info.get("name"),
            mobile=user_info.get("mobile"),
            organization=user_info.get("organization")
        )
        await message.answer(
            f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['name']}!",
            reply_markup=main_menu()
        )
        await state.clear()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –≥–∞—Ä–∞–∂"
@dp.message(lambda message: message.text == "–ú–æ–π –≥–∞—Ä–∞–∂")
async def my_garage(message: types.Message):
    user_id = message.from_user.id
    if not await is_user_authorized(user_id, message):
        return

    cars = db.get_cars_by_user(user_id)
    if cars:
        response = "–í–∞—à –≥–∞—Ä–∞–∂:\n\n"
        response += "\n".join(
            [f"üöó {car[2]} ‚Äî {car[3]} (VIN: {car[1]})" for car in cars]
        )
        await message.answer(response)
    else:
        await message.answer("–í–∞—à –≥–∞—Ä–∞–∂ –ø—É—Å—Ç. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫")
async def vin_search_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_user_authorized(user_id, message):
        return

    await state.set_state(VinStates.waiting_for_vin)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 17 —Å–∏–º–≤–æ–ª–æ–≤.")


@dp.message(VinStates.waiting_for_vin)
async def handle_vin_input(message: types.Message, state: FSMContext):
    vin = validate_vin(message.text)
    if not vin:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    command = f"FindVehicleByVIN:Locale=ru_RU|VIN={vin}|Localized=true"

    # –ü–µ—Ä–µ–¥–∞–µ–º –∏ `command`, –∏ `vin` –≤ `send_soap_request`
    vehicle_data = send_soap_request(command, vin)

    if "error" in vehicle_data:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {vehicle_data['error']}")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `vehicle_data` —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if isinstance(vehicle_data, list) and len(vehicle_data) > 0:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –≤—ã–≤–æ–¥–∏–º –∏—Ö —Å–ø–∏—Å–æ–∫
        vehicles = vehicle_data
        response = "üöó –ù–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n\n"
        for idx, vehicle in enumerate(vehicles, start=1):
            response += (
                f"{idx}. –ú–∞—Ä–∫–∞: {vehicle.get('brand')}, "
                f"–ú–æ–¥–µ–ª—å: {vehicle.get('name')}, "
                f"–ö–∞—Ç–∞–ª–æ–≥: {vehicle.get('catalog')}\n"
            )
        response += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≥–∞—Ä–∞–∂, –∏–ª–∏ '0', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
        await message.answer(response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        await state.update_data(vehicles=vehicles)
        await state.set_state(VinStates.waiting_for_selection)
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VIN –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()





@dp.message(VinStates.waiting_for_selection)
async def process_vehicle_selection(message: types.Message, state: FSMContext):
    data = await state.get_data()
    vehicles = data.get("vehicles")
    if not vehicles:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ VIN-–∫–æ–¥–∞.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ (–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è)
    try:
        user_input = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ '0', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")
        return

    if user_input == 0:
        await message.answer("–í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return

    if 1 <= user_input <= len(vehicles):
        selected_vehicle = vehicles[user_input - 1]
        user_id = message.from_user.id

        # VIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        vin = selected_vehicle.get("vin")
        if not vin:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ VIN –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        car_id = db.add_vehicle_to_database(
            vin=vin,  # VIN –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            brand=selected_vehicle["brand"],
            model=selected_vehicle["name"],
            catalog=selected_vehicle["catalog"],
            ssd=selected_vehicle["ssd"]
        )

        if car_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –≥–∞—Ä–∞–∂–µ
            if not db.is_car_in_garage(user_id, car_id):
                db.add_vehicle_to_garage(user_id, car_id)
                await message.answer(
                    f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å '{selected_vehicle['brand']} {selected_vehicle['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –≥–∞—Ä–∞–∂!"
                )
            else:
                await message.answer("–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –≥–∞—Ä–∞–∂–µ!")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –≥–∞—Ä–∞–∂.")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ '0', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")








# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
